package solutions.year2015;

import java.util.List;

import com.github.aoclib.api.InputParser;
import com.github.aoclib.solver.DayX;

/**
 * <p>
 * AUTOGENERATED BY DayGenerator.java
 * </p>
 *
 * <p>
 * https://github.com/vilhok/aoc-lib
 * </p>
 *
 * <p>
 * Edits in this file will not be overwritten.
 * </p>
 *
 */
public class Year2015Day17 extends DayX {
	int minimum = Integer.MAX_VALUE;
	int count = 0;

	public long getCombinationCount(int[] containers, int startIndex, int total, int containerCount) {

		long combinations = 0;

		if (total == 150) {
			if (containerCount < minimum) {
				minimum = containerCount;
				count = 1;
			} else if (containerCount == minimum) {
				count++;
			}
			return 1;
		} else if (total > 150) {
			return 0;
		}
		if (startIndex >= containers.length)
			return 0;
		for (int i = startIndex; i < containers.length; i++) {
			int nnew = total + containers[i];
			combinations += getCombinationCount(containers, i + 1, nnew, containerCount + 1);

		}
		return combinations;
	}

	@Override
	public Object firstPart(InputParser input) {
		int[] containers = input.asSingleIntArray();

		return getCombinationCount(containers, 0, 0, 0);
	}

	@Override
	public Object secondPart(InputParser input) {
		if (count == 0) {
			firstPart(input);
		}
		return count;
	}

	/*
	 * Optional: add tests for each part in the following methods
	 *
	 * These methods have blank implementations in superclass as well and can be
	 * deleted if you don't want to include tests.
	 *
	 * Add test as follows:
	 *
	 * new Test("sampleinput", expectedSolution);
	 *
	 * Collect the tests from the task web page.
	 */

	@Override
	protected void insertTestsPart1(List<Test> tests) {
//		tests.add(new Test("""
//				5
//				5
//				10
//				15
//				20
//				""", 4));
	}

	@Override
	protected void insertTestsPart2(List<Test> tests) {

	}
}
